{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | Target Indicators Documentation",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [Unreleased] Added Changed Deprecated Removed Fixed"
  },
  "api/TargetIndicators.BoundaryShape.html": {
    "href": "api/TargetIndicators.BoundaryShape.html",
    "title": "Enum BoundaryShape | Target Indicators Documentation",
    "summary": "Enum BoundaryShape Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public enum BoundaryShape Fields Name Description Ellipse Rectangle"
  },
  "api/TargetIndicators.BoundaryType.html": {
    "href": "api/TargetIndicators.BoundaryType.html",
    "title": "Enum BoundaryType | Target Indicators Documentation",
    "summary": "Enum BoundaryType Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public enum BoundaryType Fields Name Description Absolute CompassTape None Padded"
  },
  "api/TargetIndicators.Ellipse.html": {
    "href": "api/TargetIndicators.Ellipse.html",
    "title": "Struct Ellipse | Target Indicators Documentation",
    "summary": "Struct Ellipse Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public struct Ellipse Constructors Ellipse(Vector2, float, float) Declaration public Ellipse(Vector2 center, float semiMajorAxisLength, float semiMinorAxisLength) Parameters Type Name Description Vector2 center float semiMajorAxisLength float semiMinorAxisLength Properties Center Declaration public readonly Vector2 Center { get; } Property Value Type Description Vector2 SemiMajorAxisLength Declaration public readonly float SemiMajorAxisLength { get; } Property Value Type Description float SemiMinorAxisLength Declaration public readonly float SemiMinorAxisLength { get; } Property Value Type Description float"
  },
  "api/TargetIndicators.TargetIndicator.html": {
    "href": "api/TargetIndicators.TargetIndicator.html",
    "title": "Struct TargetIndicator | Target Indicators Documentation",
    "summary": "Struct TargetIndicator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public struct TargetIndicator Constructors TargetIndicator(TargetIndicatorId, Transform, Pose, bool) Declaration public TargetIndicator(TargetIndicatorId id, Transform target, Pose screenPose, bool isOutsideBounds) Parameters Type Name Description TargetIndicatorId id Transform target Pose screenPose bool isOutsideBounds TargetIndicator(TargetIndicatorId, Transform, Vector3, Quaternion, bool) Declaration public TargetIndicator(TargetIndicatorId id, Transform target, Vector3 screenPoint, Quaternion rotation, bool isOutsideBounds) Parameters Type Name Description TargetIndicatorId id Transform target Vector3 screenPoint Quaternion rotation bool isOutsideBounds Properties Default Declaration public static TargetIndicator Default { get; } Property Value Type Description TargetIndicator Id Declaration public readonly TargetIndicatorId Id { get; } Property Value Type Description TargetIndicatorId IsOutsideBounds Declaration public readonly bool IsOutsideBounds { get; } Property Value Type Description bool ScreenPose Declaration public readonly Pose ScreenPose { get; } Property Value Type Description Pose Target Declaration public readonly Transform Target { get; } Property Value Type Description Transform"
  },
  "api/TargetIndicators.TargetIndicatorBoundaryVisualizer.html": {
    "href": "api/TargetIndicators.TargetIndicatorBoundaryVisualizer.html",
    "title": "Class TargetIndicatorBoundaryVisualizer | Target Indicators Documentation",
    "summary": "Class TargetIndicatorBoundaryVisualizer Visualizes the boundary configured in TargetIndicators.TargetIndicatorBoundaryVisualizer._targetIndicatorManager. Note that BoundaryType.CompassTape and BoundaryType.None can't be visualized. Inheritance object TargetIndicatorBoundaryVisualizer Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorBoundaryVisualizer : MonoBehaviour Constructors TargetIndicatorBoundaryVisualizer() Declaration public TargetIndicatorBoundaryVisualizer()"
  },
  "api/TargetIndicators.TargetIndicatorBoundaryVisualizerEditor.html": {
    "href": "api/TargetIndicators.TargetIndicatorBoundaryVisualizerEditor.html",
    "title": "Class TargetIndicatorBoundaryVisualizerEditor | Target Indicators Documentation",
    "summary": "Class TargetIndicatorBoundaryVisualizerEditor A comment. Inheritance object TargetIndicatorBoundaryVisualizerEditor Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorBoundaryVisualizerEditor : Editor Constructors TargetIndicatorBoundaryVisualizerEditor() Declaration public TargetIndicatorBoundaryVisualizerEditor() Methods OnInspectorGUI() A comment. Declaration public override void OnInspectorGUI()"
  },
  "api/TargetIndicators.TargetIndicatorId.html": {
    "href": "api/TargetIndicators.TargetIndicatorId.html",
    "title": "Struct TargetIndicatorId | Target Indicators Documentation",
    "summary": "Struct TargetIndicatorId Implements IEquatable<TargetIndicatorId> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public readonly struct TargetIndicatorId : IEquatable<TargetIndicatorId> Constructors TargetIndicatorId(Guid) Declaration public TargetIndicatorId(Guid id) Parameters Type Name Description Guid id Properties Default Declaration public static TargetIndicatorId Default { get; } Property Value Type Description TargetIndicatorId Id Declaration public Guid Id { get; } Property Value Type Description Guid Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) Equals(TargetIndicatorId) Declaration public bool Equals(TargetIndicatorId other) Parameters Type Name Description TargetIndicatorId other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators operator ==(TargetIndicatorId, TargetIndicatorId) Declaration public static bool operator ==(TargetIndicatorId a, TargetIndicatorId b) Parameters Type Name Description TargetIndicatorId a TargetIndicatorId b Returns Type Description bool operator !=(TargetIndicatorId, TargetIndicatorId) Declaration public static bool operator !=(TargetIndicatorId a, TargetIndicatorId b) Parameters Type Name Description TargetIndicatorId a TargetIndicatorId b Returns Type Description bool Implements IEquatable<T>"
  },
  "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsRemovedDelegate.html": {
    "href": "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsRemovedDelegate.html",
    "title": "Delegate TargetIndicatorManager.TargetIndicatorsRemovedDelegate | Target Indicators Documentation",
    "summary": "Delegate TargetIndicatorManager.TargetIndicatorsRemovedDelegate Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public delegate void TargetIndicatorManager.TargetIndicatorsRemovedDelegate(ReadOnlySpan<TargetIndicatorId> span) Parameters Type Name Description ReadOnlySpan<TargetIndicatorId> span Constructors TargetIndicatorsRemovedDelegate(object, nint) Declaration public TargetIndicatorsRemovedDelegate(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ReadOnlySpan<TargetIndicatorId>, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ReadOnlySpan<TargetIndicatorId> span, AsyncCallback callback, object @object) Parameters Type Name Description ReadOnlySpan<TargetIndicatorId> span AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(ReadOnlySpan<TargetIndicatorId>) Declaration public virtual void Invoke(ReadOnlySpan<TargetIndicatorId> span) Parameters Type Name Description ReadOnlySpan<TargetIndicatorId> span"
  },
  "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsUpdatedDelegate.html": {
    "href": "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsUpdatedDelegate.html",
    "title": "Delegate TargetIndicatorManager.TargetIndicatorsUpdatedDelegate | Target Indicators Documentation",
    "summary": "Delegate TargetIndicatorManager.TargetIndicatorsUpdatedDelegate Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public delegate void TargetIndicatorManager.TargetIndicatorsUpdatedDelegate(ReadOnlySpan<TargetIndicator> span) Parameters Type Name Description ReadOnlySpan<TargetIndicator> span Constructors TargetIndicatorsUpdatedDelegate(object, nint) Declaration public TargetIndicatorsUpdatedDelegate(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ReadOnlySpan<TargetIndicator>, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ReadOnlySpan<TargetIndicator> span, AsyncCallback callback, object @object) Parameters Type Name Description ReadOnlySpan<TargetIndicator> span AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(ReadOnlySpan<TargetIndicator>) Declaration public virtual void Invoke(ReadOnlySpan<TargetIndicator> span) Parameters Type Name Description ReadOnlySpan<TargetIndicator> span"
  },
  "api/TargetIndicators.TargetIndicatorManager.html": {
    "href": "api/TargetIndicators.TargetIndicatorManager.html",
    "title": "Class TargetIndicatorManager | Target Indicators Documentation",
    "summary": "Class TargetIndicatorManager Transforms world space positions into screen space position for tracking targets with indicators. Useful for displaying to users which direction a target is relative to where they are looking. Inheritance object TargetIndicatorManager Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorManager : MonoBehaviour Constructors TargetIndicatorManager() Declaration public TargetIndicatorManager() Properties BottomPadding Declaration public float BottomPadding { get; set; } Property Value Type Description float BoundaryShape Declaration public BoundaryShape BoundaryShape { get; set; } Property Value Type Description BoundaryShape BoundaryType Declaration public BoundaryType BoundaryType { get; set; } Property Value Type Description BoundaryType Camera Declaration public Camera Camera { get; set; } Property Value Type Description Camera Ellipse Declaration public Ellipse Ellipse { get; } Property Value Type Description Ellipse EnableTargetIndicatorsUpdatedEvent Declaration public bool EnableTargetIndicatorsUpdatedEvent { get; set; } Property Value Type Description bool Height Declaration public float Height { get; set; } Property Value Type Description float LeftPadding Declaration public float LeftPadding { get; set; } Property Value Type Description float MaxTargets Declaration public int MaxTargets { get; } Property Value Type Description int Rectangle Declaration public Rect Rectangle { get; } Property Value Type Description Rect RightPadding Declaration public float RightPadding { get; set; } Property Value Type Description float TopPadding Declaration public float TopPadding { get; set; } Property Value Type Description float TrackedTargetsCount Declaration public int TrackedTargetsCount { get; } Property Value Type Description int Width Declaration public float Width { get; set; } Property Value Type Description float Methods GetScreenPose(in Vector3, out bool) Declaration public Pose GetScreenPose(in Vector3 worldSpacePosition, out bool isOutsideBounds) Parameters Type Name Description Vector3 worldSpacePosition bool isOutsideBounds Returns Type Description Pose IsOutsideBounds(in Vector3) Declaration public bool IsOutsideBounds(in Vector3 screenPoint) Parameters Type Name Description Vector3 screenPoint Returns Type Description bool Exceptions Type Condition ArgumentOutOfRangeException RemoveAllTargets() Declaration public void RemoveAllTargets() TryAddTarget(Transform, out TargetIndicator) Declaration public bool TryAddTarget(Transform target, out TargetIndicator targetIndicator) Parameters Type Name Description Transform target TargetIndicator targetIndicator Returns Type Description bool TryGetTargetIndicator(TargetIndicatorId, out TargetIndicator) Declaration public bool TryGetTargetIndicator(TargetIndicatorId targetIndicatorId, out TargetIndicator targetIndicator) Parameters Type Name Description TargetIndicatorId targetIndicatorId TargetIndicator targetIndicator Returns Type Description bool TryRemoveTarget(TargetIndicatorId) Declaration public bool TryRemoveTarget(TargetIndicatorId targetIndicatorId) Parameters Type Name Description TargetIndicatorId targetIndicatorId Returns Type Description bool Events TargetIndicatorsAdded Declaration public event TargetIndicatorManager.TargetIndicatorsUpdatedDelegate TargetIndicatorsAdded Event Type Type Description TargetIndicatorManager.TargetIndicatorsUpdatedDelegate TargetIndicatorsRemoved Declaration public event TargetIndicatorManager.TargetIndicatorsRemovedDelegate TargetIndicatorsRemoved Event Type Type Description TargetIndicatorManager.TargetIndicatorsRemovedDelegate TargetIndicatorsUpdated Declaration public event TargetIndicatorManager.TargetIndicatorsUpdatedDelegate TargetIndicatorsUpdated Event Type Type Description TargetIndicatorManager.TargetIndicatorsUpdatedDelegate"
  },
  "api/TargetIndicators.TargetIndicatorManagerEditor.html": {
    "href": "api/TargetIndicators.TargetIndicatorManagerEditor.html",
    "title": "Class TargetIndicatorManagerEditor | Target Indicators Documentation",
    "summary": "Class TargetIndicatorManagerEditor A comment. Inheritance object TargetIndicatorManagerEditor Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorManagerEditor : Editor Constructors TargetIndicatorManagerEditor() Declaration public TargetIndicatorManagerEditor() Methods OnInspectorGUI() A comment. Declaration public override void OnInspectorGUI()"
  },
  "api/TargetIndicators.html": {
    "href": "api/TargetIndicators.html",
    "title": "Namespace TargetIndicators | Target Indicators Documentation",
    "summary": "Namespace TargetIndicators Classes TargetIndicatorBoundaryVisualizer Visualizes the boundary configured in TargetIndicators.TargetIndicatorBoundaryVisualizer._targetIndicatorManager. Note that BoundaryType.CompassTape and BoundaryType.None can't be visualized. TargetIndicatorManager Transforms world space positions into screen space position for tracking targets with indicators. Useful for displaying to users which direction a target is relative to where they are looking. Structs Ellipse TargetIndicator TargetIndicatorId Enums BoundaryShape BoundaryType Delegates TargetIndicatorManager.TargetIndicatorsRemovedDelegate TargetIndicatorManager.TargetIndicatorsUpdatedDelegate"
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | Target Indicators Documentation",
    "summary": "Getting Started Here is a link to some API docs Ellipse."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": ""
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | Target Indicators Documentation",
    "summary": "Introduction"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Target Indicators | Target Indicators Documentation",
    "summary": "Target Indicators Target Indicators is a Unity package that enables you to easily create visual indicators to track targets in your Unity app. Track waypoints, points of interest, enemies, other players, or any transform or 3D point. Features Target Indicators supports the following boundary types: Boundary Type Description Padded Absolute CompassTape None Padded and Absolute Boundary types supports the following boundary shapes: Boundary Shape Description Rectangle Ellipse"
  },
  "manual/project-setup.html": {
    "href": "manual/project-setup.html",
    "title": "Project Setup | Target Indicators Documentation",
    "summary": "Project Setup General project setup instructions go here."
  },
  "manual/samples/samples.html": {
    "href": "manual/samples/samples.html",
    "title": "Samples | Target Indicators Documentation",
    "summary": "Samples"
  },
  "manual/setup/setup-part1.html": {
    "href": "manual/setup/setup-part1.html",
    "title": "Part 1 Setup | Target Indicators Documentation",
    "summary": "Part 1 Setup Setup part 1 instructions go here"
  },
  "manual/setup/setup-part2.html": {
    "href": "manual/setup/setup-part2.html",
    "title": "Part 2 Setup | Target Indicators Documentation",
    "summary": "Part 2 Setup Setup part 2 instructions go here"
  }
}