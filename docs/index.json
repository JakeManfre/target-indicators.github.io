{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | Target Indicators Documentation",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [Unreleased] Added Changed Deprecated Removed Fixed"
  },
  "api/TargetIndicators.BoundaryShape.html": {
    "href": "api/TargetIndicators.BoundaryShape.html",
    "title": "Enum BoundaryShape | Target Indicators Documentation",
    "summary": "Enum BoundaryShape Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public enum BoundaryShape Fields Name Description Ellipse Rectangle"
  },
  "api/TargetIndicators.BoundaryType.html": {
    "href": "api/TargetIndicators.BoundaryType.html",
    "title": "Enum BoundaryType | Target Indicators Documentation",
    "summary": "Enum BoundaryType Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public enum BoundaryType Fields Name Description Absolute CompassTape None Padded"
  },
  "api/TargetIndicators.Ellipse.html": {
    "href": "api/TargetIndicators.Ellipse.html",
    "title": "Struct Ellipse | Target Indicators Documentation",
    "summary": "Struct Ellipse Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public struct Ellipse Constructors Ellipse(Vector2, float, float) Declaration public Ellipse(Vector2 center, float semiMajorAxisLength, float semiMinorAxisLength) Parameters Type Name Description Vector2 center float semiMajorAxisLength float semiMinorAxisLength Properties Center Declaration public readonly Vector2 Center { get; } Property Value Type Description Vector2 SemiMajorAxisLength Declaration public readonly float SemiMajorAxisLength { get; } Property Value Type Description float SemiMinorAxisLength Declaration public readonly float SemiMinorAxisLength { get; } Property Value Type Description float"
  },
  "api/TargetIndicators.TargetIndicator.html": {
    "href": "api/TargetIndicators.TargetIndicator.html",
    "title": "Struct TargetIndicator | Target Indicators Documentation",
    "summary": "Struct TargetIndicator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public struct TargetIndicator Constructors TargetIndicator(TargetIndicatorId, Transform, Pose, bool) Declaration public TargetIndicator(TargetIndicatorId id, Transform target, Pose screenPose, bool isOutsideBounds) Parameters Type Name Description TargetIndicatorId id Transform target Pose screenPose bool isOutsideBounds TargetIndicator(TargetIndicatorId, Transform, Vector3, Quaternion, bool) Declaration public TargetIndicator(TargetIndicatorId id, Transform target, Vector3 screenPoint, Quaternion rotation, bool isOutsideBounds) Parameters Type Name Description TargetIndicatorId id Transform target Vector3 screenPoint Quaternion rotation bool isOutsideBounds Properties Default Declaration public static TargetIndicator Default { get; } Property Value Type Description TargetIndicator Id Declaration public readonly TargetIndicatorId Id { get; } Property Value Type Description TargetIndicatorId IsOutsideBounds Declaration public readonly bool IsOutsideBounds { get; } Property Value Type Description bool ScreenPose Declaration public readonly Pose ScreenPose { get; } Property Value Type Description Pose Target Declaration public readonly Transform Target { get; } Property Value Type Description Transform"
  },
  "api/TargetIndicators.TargetIndicatorBoundaryVisualizer.html": {
    "href": "api/TargetIndicators.TargetIndicatorBoundaryVisualizer.html",
    "title": "Class TargetIndicatorBoundaryVisualizer | Target Indicators Documentation",
    "summary": "Class TargetIndicatorBoundaryVisualizer Inheritance object TargetIndicatorBoundaryVisualizer Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorBoundaryVisualizer : MonoBehaviour Constructors TargetIndicatorBoundaryVisualizer() Declaration public TargetIndicatorBoundaryVisualizer()"
  },
  "api/TargetIndicators.TargetIndicatorBoundaryVisualizerEditor.html": {
    "href": "api/TargetIndicators.TargetIndicatorBoundaryVisualizerEditor.html",
    "title": "Class TargetIndicatorBoundaryVisualizerEditor | Target Indicators Documentation",
    "summary": "Class TargetIndicatorBoundaryVisualizerEditor A comment. Inheritance object TargetIndicatorBoundaryVisualizerEditor Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorBoundaryVisualizerEditor : Editor Constructors TargetIndicatorBoundaryVisualizerEditor() Declaration public TargetIndicatorBoundaryVisualizerEditor() Methods OnInspectorGUI() A comment. Declaration public override void OnInspectorGUI()"
  },
  "api/TargetIndicators.TargetIndicatorId.html": {
    "href": "api/TargetIndicators.TargetIndicatorId.html",
    "title": "Struct TargetIndicatorId | Target Indicators Documentation",
    "summary": "Struct TargetIndicatorId Implements IEquatable<TargetIndicatorId> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public readonly struct TargetIndicatorId : IEquatable<TargetIndicatorId> Constructors TargetIndicatorId(Guid) Declaration public TargetIndicatorId(Guid id) Parameters Type Name Description Guid id Properties Default Declaration public static TargetIndicatorId Default { get; } Property Value Type Description TargetIndicatorId Id Declaration public Guid Id { get; } Property Value Type Description Guid Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) Equals(TargetIndicatorId) Declaration public bool Equals(TargetIndicatorId other) Parameters Type Name Description TargetIndicatorId other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators operator ==(TargetIndicatorId, TargetIndicatorId) Declaration public static bool operator ==(TargetIndicatorId a, TargetIndicatorId b) Parameters Type Name Description TargetIndicatorId a TargetIndicatorId b Returns Type Description bool operator !=(TargetIndicatorId, TargetIndicatorId) Declaration public static bool operator !=(TargetIndicatorId a, TargetIndicatorId b) Parameters Type Name Description TargetIndicatorId a TargetIndicatorId b Returns Type Description bool Implements IEquatable<T>"
  },
  "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsRemovedDelegate.html": {
    "href": "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsRemovedDelegate.html",
    "title": "Delegate TargetIndicatorManager.TargetIndicatorsRemovedDelegate | Target Indicators Documentation",
    "summary": "Delegate TargetIndicatorManager.TargetIndicatorsRemovedDelegate Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public delegate void TargetIndicatorManager.TargetIndicatorsRemovedDelegate(ReadOnlySpan<TargetIndicatorId> span) Parameters Type Name Description ReadOnlySpan<TargetIndicatorId> span Constructors TargetIndicatorsRemovedDelegate(object, nint) Declaration public TargetIndicatorsRemovedDelegate(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ReadOnlySpan<TargetIndicatorId>, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ReadOnlySpan<TargetIndicatorId> span, AsyncCallback callback, object @object) Parameters Type Name Description ReadOnlySpan<TargetIndicatorId> span AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(ReadOnlySpan<TargetIndicatorId>) Declaration public virtual void Invoke(ReadOnlySpan<TargetIndicatorId> span) Parameters Type Name Description ReadOnlySpan<TargetIndicatorId> span"
  },
  "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsUpdatedDelegate.html": {
    "href": "api/TargetIndicators.TargetIndicatorManager.TargetIndicatorsUpdatedDelegate.html",
    "title": "Delegate TargetIndicatorManager.TargetIndicatorsUpdatedDelegate | Target Indicators Documentation",
    "summary": "Delegate TargetIndicatorManager.TargetIndicatorsUpdatedDelegate Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public delegate void TargetIndicatorManager.TargetIndicatorsUpdatedDelegate(ReadOnlySpan<TargetIndicator> span) Parameters Type Name Description ReadOnlySpan<TargetIndicator> span Constructors TargetIndicatorsUpdatedDelegate(object, nint) Declaration public TargetIndicatorsUpdatedDelegate(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ReadOnlySpan<TargetIndicator>, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(ReadOnlySpan<TargetIndicator> span, AsyncCallback callback, object @object) Parameters Type Name Description ReadOnlySpan<TargetIndicator> span AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(ReadOnlySpan<TargetIndicator>) Declaration public virtual void Invoke(ReadOnlySpan<TargetIndicator> span) Parameters Type Name Description ReadOnlySpan<TargetIndicator> span"
  },
  "api/TargetIndicators.TargetIndicatorManager.html": {
    "href": "api/TargetIndicators.TargetIndicatorManager.html",
    "title": "Class TargetIndicatorManager | Target Indicators Documentation",
    "summary": "Class TargetIndicatorManager Inheritance object TargetIndicatorManager Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorManager : MonoBehaviour Constructors TargetIndicatorManager() Declaration public TargetIndicatorManager() Properties BottomPadding Declaration public float BottomPadding { get; set; } Property Value Type Description float BoundaryShape Declaration public BoundaryShape BoundaryShape { get; set; } Property Value Type Description BoundaryShape BoundaryType Declaration public BoundaryType BoundaryType { get; set; } Property Value Type Description BoundaryType Camera Declaration public Camera Camera { get; set; } Property Value Type Description Camera Ellipse Declaration public Ellipse Ellipse { get; } Property Value Type Description Ellipse Height Declaration public float Height { get; set; } Property Value Type Description float LeftPadding Declaration public float LeftPadding { get; set; } Property Value Type Description float MaxTargets Declaration public int MaxTargets { get; } Property Value Type Description int Rectangle Declaration public Rect Rectangle { get; } Property Value Type Description Rect RightPadding Declaration public float RightPadding { get; set; } Property Value Type Description float TopPadding Declaration public float TopPadding { get; set; } Property Value Type Description float TrackedTargetsCount Declaration public int TrackedTargetsCount { get; } Property Value Type Description int Width Declaration public float Width { get; set; } Property Value Type Description float Methods GetScreenPose(in Vector3, out bool) Declaration public Pose GetScreenPose(in Vector3 worldSpacePosition, out bool isOutsideBounds) Parameters Type Name Description Vector3 worldSpacePosition bool isOutsideBounds Returns Type Description Pose IsOutsideBounds(in Vector3) Declaration public bool IsOutsideBounds(in Vector3 screenPoint) Parameters Type Name Description Vector3 screenPoint Returns Type Description bool RemoveAllTargets() Declaration public void RemoveAllTargets() TryAddTarget(Transform, out TargetIndicator) Declaration public bool TryAddTarget(Transform target, out TargetIndicator targetIndicator) Parameters Type Name Description Transform target TargetIndicator targetIndicator Returns Type Description bool TryGetTargetIndicator(TargetIndicatorId, out TargetIndicator) Declaration public bool TryGetTargetIndicator(TargetIndicatorId targetIndicatorId, out TargetIndicator targetIndicator) Parameters Type Name Description TargetIndicatorId targetIndicatorId TargetIndicator targetIndicator Returns Type Description bool TryRemoveTarget(TargetIndicatorId) Declaration public bool TryRemoveTarget(TargetIndicatorId targetIndicatorId) Parameters Type Name Description TargetIndicatorId targetIndicatorId Returns Type Description bool Events TargetIndicatorsAdded Declaration public event TargetIndicatorManager.TargetIndicatorsUpdatedDelegate TargetIndicatorsAdded Event Type Type Description TargetIndicatorManager.TargetIndicatorsUpdatedDelegate TargetIndicatorsRemoved Declaration public event TargetIndicatorManager.TargetIndicatorsRemovedDelegate TargetIndicatorsRemoved Event Type Type Description TargetIndicatorManager.TargetIndicatorsRemovedDelegate TargetIndicatorsUpdated Declaration public event TargetIndicatorManager.TargetIndicatorsUpdatedDelegate TargetIndicatorsUpdated Event Type Type Description TargetIndicatorManager.TargetIndicatorsUpdatedDelegate"
  },
  "api/TargetIndicators.TargetIndicatorManagerEditor.html": {
    "href": "api/TargetIndicators.TargetIndicatorManagerEditor.html",
    "title": "Class TargetIndicatorManagerEditor | Target Indicators Documentation",
    "summary": "Class TargetIndicatorManagerEditor A comment. Inheritance object TargetIndicatorManagerEditor Namespace: TargetIndicators Assembly: TargetIndicators.dll Syntax public class TargetIndicatorManagerEditor : Editor Constructors TargetIndicatorManagerEditor() Declaration public TargetIndicatorManagerEditor() Methods OnInspectorGUI() A comment. Declaration public override void OnInspectorGUI()"
  },
  "api/TargetIndicators.html": {
    "href": "api/TargetIndicators.html",
    "title": "Namespace TargetIndicators | Target Indicators Documentation",
    "summary": "Namespace TargetIndicators Classes TargetIndicatorBoundaryVisualizer TargetIndicatorManager Structs Ellipse TargetIndicator TargetIndicatorId Enums BoundaryShape BoundaryType Delegates TargetIndicatorManager.TargetIndicatorsRemovedDelegate TargetIndicatorManager.TargetIndicatorsUpdatedDelegate"
  },
  "get-target-indicators.html": {
    "href": "get-target-indicators.html",
    "title": "",
    "summary": ""
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | Target Indicators Documentation",
    "summary": "Getting Started Here is a link to some API docs Ellipse."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": ""
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | Target Indicators Documentation",
    "summary": "Introduction"
  },
  "manual/how-to-use.html": {
    "href": "manual/how-to-use.html",
    "title": "How to use target indicators | Target Indicators Documentation",
    "summary": "How to use target indicators Target Indicators only requires the TargetIndicatorManager component which is responsible for adding, updating, and removing targets to track. Simply give it a transform or 3D point in space and it will return the screen pose for the indicator. Use any UI system for drawing your indicators and customize your indicators for your projects needs. You can configure the target indicators manager to keep your indicators bound within the screen and adjust the padding, size, and shape of the boundary. Use multiple managers to have multiple boundary configurations for different indicator groups. The following sections explain how to use the target indicators API. Important By default Target Indicators does not display or draw any UI in the scene. It only returns screen pose coordinates for you to display your own indicators. This enables you to use any UI system you want. If you are interested in a prebuilt indicator UI you can import the sample's starter assets which provides an easy to use solution with Unity UI. Refer to the samples docs to learn more about how to configure the prebuilt indicators. Scene Setup Add the TargetIndicatorManager to a GameObject in the hiearchy and edit the configuration to your projects needs. Configure the Target Indicator Manager The TargetIndicatorManager has several serialized fields that can be edited within the inspector or set via properties at runtime. The following sections explains each property in more detail. Camera The camera reference is used for calculating the screen space coordinates of each target. By default when the TargetIndicatorManager component is added or reset it will assign the camera in your scene with the MainCamera tag. If no camera has the MainCamera tag it will fallback to using the first camera in the scene. You can assign a different camera if you want to target a specific camera for your target indicators. You can also assign the camera reference at runtime by the TargetIndicatorManager.Camera property. Boundary type The boundary type determines how target indicators should be positioned. For example indicators can be bound by the screen edges and automatically adjust with the screen size or they can have no boundary and only show an indicator when its target is on screen. You can change the boundary shape at runtime through the BoundaryType property. Refer to the table below to understand the different boundary types: Boundary Type Description Use Case Preview Padded Bounded by the screen edges with adjustable padding. Dynamically updates when the screen resizes. Waypoints, points of interest, enemies, other players, etc. Absolute Bounded by the absolute size of the configured boundary regardless of changes in screen size. First person games where you want to indicate the direction you were attacked from. Compass Tape Bounded between 0 and 1 where 0 is to the left, 1 is to the right. Common in Battle Royale games you want to display indicators on the horizontal compass tape. None Unbounded and the target indicator is only visible when the target is on screen. Use to compliment compass tape boundary type to indicate on screen position of targets. Boundary shape When using Padded or Absolute boundaries, you can configure the shape of the boundary to be a Rectangle or Ellipse. You can change the boundary shape at runtime through the BoundaryShape property. Rectangle TargetIndicatorManager provides the Rectangle property to get the currently configured rectangles Rect data. This is used for the boundary visualizer but can be used for your apps needs as well. Ellipse TargetIndicatorManager provides the Ellipse property to get the currently configured Ellipse data. This is used for the boundary visualizer but can be used for your apps needs as well. Padding When BoundaryType is Padded you can adjust the distance in pixels between the edge of the screen and the boundary. You can configure the padding for the Top, Bottom, Left, and Right edges independently. These properties are ignored if the boundary shape is not set to Padded. Size When BoundaryType is Absolute you can adjust the size by the Width and Height properties. The size does not change if the screen resolution or aspect ratio changes. These properties are ignored if the boundary shape is not set to Absolute. Visualize the boundary You can visualize your current configuration at edit time and at runtime with the TargetIndicatorBoundaryVisualizer. Add visualizer Edit visualizer Add a target To add a target to track use TryAddTarget as shown in the following code example: public void TryAddTargetExample(TargetIndicatorManager manager, Transform target) { var wasAdded = manager.TryAddTarget(target, out var targetIndicator); if (!wasAdded) { // Failed to add target because max limit of targets is reached. // Handle error. return; } // Successfully added target. } The max number of targets that can be tracked at once is 100. TryAddTarget can only fail if you try to add more than 100 targets. To get the current number of tracked targets use TrackedTargetsCount. If you need more than 100 (god bless), you can use multiple target indicator managers. Keep track of the returned TargetIndicator.TrackedIndicatorId in the out parameter to know which target indicator corresponds to a target. Remove a target To remove a target from being tracked use TryRemoveTarget as shown in the following code example: public void TryRemoveTargetExample(TargetIndicatorManager manager, TargetIndicatorId id) { var wasRemoved = manager.TryRemoveTarget(id); if (!wasRemoved) { // Failed to remove target because the target indicator ID was invalid. // Handle error. return; } // Successfully removed target. } Note Removing a target can only fail if you pass an invalid TargetIndicatorId. Remove all targets To remove all targets at once use RemoveAllTargets as shown in the following code example: public void RemoveAllTargetsExample(TargetIndicatorManager manager) { manager.RemoveAllTargets(); // Successfully removed all tracked targets. } Tip If you just want to stop receiving updates you can disable the TargetIndicatorManager component. Re-enabling it will resume tracking targets. Get a target To check if a target indicator is being tracked use TryGetTargetIndicator as shown in the following code example: public void GetATargetIndicatorExample( TargetIndicatorManager manager, TargetIndicatorId id) { var didGet = manager.TryGetTargetIndicator(id, out var targetIndicator); if (!didGet) { // Failed to get target because target indicator ID was invalid. // Handle error. return; } // Successfully received target indicator. } Get screen pose If you want to get the screen pose of any world space position use GetScreenPose. This can be useful if you want to control your own life cycle, you only need a one time update, or need infrequent updates for a targets screen pose. The following code example shows you how to use GetScreenPose: public void GetScreenPoseExample( TargetIndicatorManager manager, Vector3 worldSpacePosition) { var screenPose = manager.GetScreenPose(worldSpacePosition, out var isOutsideBounds); // screenPose.position.x = horizontal axis coordinate in screen space (pixels). // screenPose.position.y = vertical axis coordinate in screen space (pixels). // screenPose.position.z = depth from the camera in world space (meters). // screenPose.rotation = direction to target. // isOutsideBounds = true if the screenPose.position is outside the configured bounds. } Is outside boundary Each TargetIndicator contains an IsOutsideBounds property that you can use to know if a target indicators is outside the bounds of the current configuration when the TargetIndicator was created. If you want to know if any Vector3 position is outside the current boundary configuration use TargetIndicatorManager.IsOutsideBounds as shown in the following example: public void IsOutsideBoundaryExample(TargetIndicatorManager manager, Vector3 worldSpacePosition) { var isOutsideBounds = manager.IsOutsideBounds(worldSpacePosition); // isOutsideBounds = true if the pose.position is outside the configured bounds. } Life cycle events While enabled, the TargetIndicatorManager component will check for changes every frame. If any anchors were added, updated, or removed, TargetIndicatorManager will invoke TargetIndicatorsAdded, TargetIndicatorsUpdated, TargetIndicatorsRemoved events respectively. Each event passes a ReadOnlySpan that wraps around an underlying array. This avoids heap allocations and slices the array to the size of changes that occurred since the last time the events were invoked. The following code example shows how you can subscribe to these events and iterate over the spans they pass: public void LifeCycleExample(TargetIndicatorManager manager) { manager.TargetIndicatorsAdded += OnTargetIndicatorsAdded; manager.TargetIndicatorsUpdated += OnTargetIndicatorsUpdated; manager.TargetIndicatorsRemoved += OnTargetIndicatorsRemoved; } void OnTargetIndicatorsAdded(ReadOnlySpan<TargetIndicator> added) { foreach (var targetIndicator in added) { var screenPose = targetIndicator.ScreenPose; } } void OnTargetIndicatorsUpdated(ReadOnlySpan<TargetIndicator> updated) { foreach (var targetIndicator in updated) { var updatedScreenPose = targetIndicator.ScreenPose; } } void OnTargetIndicatorsRemoved(ReadOnlySpan<TargetIndicatorId> removed) { foreach (var targetIndicatorId in removed) { // TargetIndicatorId was removed. } } You can disable the TargetIndicatorManager component to stop receiving life cycle events and control your own life cycle and rely on the TargetIndicatorManager exclusively for pose and boundary checks. Using multiple target indicator managers Some applications might require multiple boundary types or multiple configurations. You can have multiple TargetIndicatorManager components in your scene to get more complex designs. For example if you use BoundaryType.CompassTape you will only get indicators to display on the compass tape but might not know what target they correspond to. You can have a second TargetIndicatorManager that is configured to use BoundaryType.None that marks the same target with a matching icon as used in your compass tape visualizer to indicate which target represents which marker in your compass tape indicator. The Samples provides an example of how to configre multiple target indicator managers. XR A common problem in XR is showing users where to look to find an important item or location in your app. You can configure your target indicators manager to guide users to targets in their environment. The current solution is limited and requires a specific configuration and setup. The following steps demonstrate how to setup your scene for XR: Set your boundary type to Absolute Edit the Width and Height Display you target indicators on a Canvas set to Screen Space Camera or UI system of your choice The Samples provides an example of how to use UGui for XR."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Target Indicators | Target Indicators Documentation",
    "summary": "Target Indicators Target Indicators is a Unity package that enables you to easily create visual indicators to track targets. Use target indicators to guide users to points of interest, waypoints, other players, or any other 3D point. Customize your indicators to your project's needs. Works with any UI system, providing an API to get the screen pose of any 3D point or transform in screen space and bounded by your configuration. Included are Samples that can be used as a drag and drop system for a low code solution or a reference for how to use the target indicators API. Note Get Target Indicators on the Unity Asset Store. Features Target indicators focuses on simplicity and high performance including: Highly configurable at edit time and runtime Does not rely on Object.Find or any variations of scene searching at runtime Does not rely on GetComponent calls Minamal one time persistent heap allocations at startup that are only disposed when you are done with Target Indicators No post initialization heap allocations, keeps performance high. Can be used with any UI system* Simple and minmal samples scenes Works with traditional display and in XR Includes a debug visualizer to understand how your indicators will be bounded Note *The package has a dependency on com.unity.ugui to support the samples and demo scenes. Preview The following describes the capabilities you can expect from Target Indicators: Rectangle boundary that adjusts with screen size Ellipse boundary that adjusts with screen size Rectangle boundary with constant size Ellipse boundary with constant size Compass tape boundary No boundary Multiple boundaries"
  },
  "manual/install-package.html": {
    "href": "manual/install-package.html",
    "title": "Install package | Target Indicators Documentation",
    "summary": "Install package Once you have purchased Target Indicators on the Unity asset store, follow these steps to add it to your project: Open the package manager via Window > Package Management > Package Manager. In the package manager window navigate to My Assets, search for Target Indicators and click Download. After the packages has downloaded you should find the package contents in the Project Window > Packages > Target Indicators. Optional samples import You also have the option to import the samples assets if you want a premade indicator visualizer system for easy use in your project or as a reference for how to use target indicators API. Navigate to the package in the package manager and import the samples. You can find the imported samples in Assets > Samples > Starter Assets. Learn more about how to use samples."
  },
  "manual/samples/samples.html": {
    "href": "manual/samples/samples.html",
    "title": "Samples | Target Indicators Documentation",
    "summary": "Samples Coming soon."
  },
  "manual/setup/setup-part1.html": {
    "href": "manual/setup/setup-part1.html",
    "title": "Part 1 Setup | Target Indicators Documentation",
    "summary": "Part 1 Setup Setup part 1 instructions go here"
  },
  "manual/setup/setup-part2.html": {
    "href": "manual/setup/setup-part2.html",
    "title": "Part 2 Setup | Target Indicators Documentation",
    "summary": "Part 2 Setup Setup part 2 instructions go here"
  }
}